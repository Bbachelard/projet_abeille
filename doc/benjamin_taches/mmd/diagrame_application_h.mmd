---
config:
  theme: forest
  layout: dagre
  look: classic
---
classDiagram
    direction LR
    class Data {
        <<struct>>
        +float temperature
        +float humidity
        +float mass
        +float pression
        +QString imgPath
        +QDateTime dateTime
        +getDateTime() QString
        +setDateTime(QString dt) void
    }
    class Ruche {
        -int m_id
        -QString m_name
        -QString m_mqttAdresse
        -QDateTime m_lastUpdate
        -double m_batterie
        +getId() int
        +getBatterie() double
        +setId(int id) void
        +setBatterie(double value) void
        +getName() QString
        +setName(QString name) void
        +getMqttAdresse() QString
        +setMqttAdresse(QString adresse) void
        +getTemperature() float
        +getHumidity() float
        +getMass() float
        +getPressure() float
        +getImagePath() QString
        +getLastUpdate() QDateTime
        +setData(float, float, float, float, QString, QDateTime) void
        +createTestRuche() Ruche*
    }
    class configurateurRuche {
        -QList~Ruche*~ m_ruches
        +getRuchesQML() QVariantList
        +getRuchesList() QList~Ruche*~
        +addRuche(Ruche* ruche) void
        +removeRuche(int rucheId) void
        +getRucheById(int id) Ruche*
        +createRuche(QString mqttAdresse) Ruche*
        +updateRucheInfo(int id, QString name, QString mqttAdresse) void
    }
    class dataManager_core {
        -QString connection
        -QSqlDatabase db
        -int rucheActiveId
        +connectDB() void
        +executeShellCommand(QString) QString
    }
    class dataManager_ruche {
        +addOrUpdateRuche(QString, QString, double) int
        +updateRucheBatterie(int, double) bool
        +getRuchesList() QVariantList
        +getRucheImages(int) QVariantList
        +addImage(int, int, QString, QString) bool
        +deleteImage(int, QString) bool
        +deleteRuche(int) bool
    }
    class dataManager_capteur {
        +saveData(int, int, float, QDateTime) void
        +getRucheData(int) QVariantList
        +getCapteurGraphData(int, int) QVariantList
        +getAllRucheData() QVariantList
        +getLastCapteurValue(int, int) QVariantList
    }
    class dataManager_auth {
        +authentification(QString, QString) bool
        +is_superadmin(QString) bool
        +adduser(QString, QString, int) void
        +verifUser(QString) bool
        +modifpw(QString, QString) void
        +modifgrade(QString, int) void
    }
    class dataManager_alerte {
        +getAllAlertes() void
        +getAlertesForCapteur(int, float) QVariantList
        +addAlerte(int, QString, QString, float, int, int, bool) bool
        +deleteAlerte(int) bool
        +updateAlerte(int, int, QString, QString, float, int, int, bool) bool
    }
    class MqttHandler {
        -dataManager* dbManager
        -QMqttClient* mqttClient
        -QString lastJson
        -configurateurRuche* configurateur
        +connectToBroker() void
        +getLastJson() QString
        +sendMqttMessage(QString, QByteArray, QString, bool) void
        -onConnected() void
        -onMessageReceived(QByteArray, QMqttTopicName) void
    }
    class QMLInterface {
        +StackView livre
        +InputPanel inputPanel
    }
    Data <|-- Ruche : utilise
    configurateurRuche "1" --> "*" Ruche : gère
    dataManager_core <|-- dataManager_ruche : étend
    dataManager_core <|-- dataManager_capteur : étend
    dataManager_core <|-- dataManager_auth : étend
    dataManager_core <|-- dataManager_alerte : étend
    MqttHandler --> configurateurRuche : utilise
    MqttHandler --> dataManager_core : utilise
    QMLInterface --> dataManager_core : utilise
    QMLInterface --> dataManager_ruche : utilise
    QMLInterface --> dataManager_capteur : utilise
    QMLInterface --> dataManager_auth : utilise
    QMLInterface --> dataManager_alerte : utilise
    QMLInterface --> configurateurRuche : utilise
    QMLInterface --> MqttHandler : utilise
